{
  "commands": [
    {
      "command": "ghidra",
      "description": "Launch the Ghidra GUI for reverse engineering. Typically, Ghidra does not use command-line operations for its primary functionalities as it is GUI-based. Users analyze binaries by importing them into the Ghidra project."
    },
    {
      "command": "ghidra_headless project_directory project_name -import binary_path",
      "description": "Run Ghidra in headless mode to automate analysis tasks. This command imports a binary into a new or existing project for analysis without launching the GUI."
    },
    {
      "command": "binwalk -e file",
      "description": "Extract all embedded files and executables from a binary or firmware image using Binwalk."
    },
    {
      "command": "binwalk -Mre file",
      "description": "Perform a recursive, automatic extraction of all embedded files within a binary or firmware image using Binwalk."
    },
    {
      "command": "binwalk -B file",
      "description": "Calculate the entropy of a file and generate a visual representation, which can be helpful for identifying compressed or encrypted sections in a binary file."
    },
    {
      "command": "binwalk --dd='.*' file",
      "description": "Extract all known file types found within the binary or firmware image."
    },
    {
      "command": "binwalk -A file",
      "description": "Perform an opcode analysis of the binary. This can help in identifying the processor architecture and any potential code obfuscation."
    },
    {
      "command": "radare2 file",
      "description": "Open a file in Radare2 for detailed binary analysis, including disassembly, graphing, and debugging."
    },
    {
      "command": "r2 -A file",
      "description": "Analyze a binary with Radare2, performing automatic analysis to annotate the binary with comments, function names, and disassembly."
    },
    {
      "command": "strings file",
      "description": "Print the sequences of printable characters in files. This command is often used in reverse engineering to find human-readable strings in binary files."
    },
    {
      "command": "objdump -D binary > output.asm",
      "description": "Disassemble a binary file and output the assembly code. Useful for examining the inner workings of a compiled program."
    },
    {
      "command": "nm binary",
      "description": "List symbols from object files. This can help identify functions, variables, and other symbols within a binary."
    },
    {
      "command": "hexdump -C file",
      "description": "Display the contents of a file in hexadecimal, alongside its ASCII translation. Useful for a raw view of a binary's data."
    }
  ]
}

