{
  "commands": [
    {
      "command": "ghidra",
      "description": "Launch the Ghidra GUI for reverse engineering. Ghidra primarily operates through its graphical user interface, allowing users to analyze binaries by importing them into Ghidra projects."
    },
    {
      "command": "ghidra_headless project_directory project_name -import binary_path",
      "description": "Run Ghidra in headless mode to automate analysis tasks. This command imports a binary into a new or existing project for analysis without launching the GUI."
    },
    {
      "command": "binwalk -e file",
      "description": "Extract all embedded files and executables from a binary or firmware image using Binwalk. The '-e' option extracts files from the specified binary or firmware image."
    },
    {
      "command": "binwalk -Mre file",
      "description": "Perform a recursive, automatic extraction of all embedded files within a binary or firmware image using Binwalk. The '-M' option enables recursive extraction, and '-re' automatically removes the extracted files after processing."
    },
    {
      "command": "binwalk -B file",
      "description": "Calculate the entropy of a file and generate a visual representation using Binwalk. This can help identify compressed or encrypted sections in a binary file. The '-B' option calculates the entropy and creates a visual graph."
    },
    {
      "command": "binwalk --dd='.*' file",
      "description": "Extract all known file types found within the binary or firmware image using Binwalk. The '--dd' option extracts all known file types, regardless of their extensions."
    },
    {
      "command": "binwalk -A file",
      "description": "Perform an opcode analysis of the binary using Binwalk. This can help identify the processor architecture and any potential code obfuscation. The '-A' option performs opcode analysis."
    },
    {
      "command": "radare2 file",
      "description": "Open a file in Radare2 for detailed binary analysis, including disassembly, graphing, and debugging. Radare2 is a powerful command-line tool for reverse engineering."
    },
    {
      "command": "r2 -A file",
      "description": "Analyze a binary with Radare2, performing automatic analysis to annotate the binary with comments, function names, and disassembly. The '-A' option performs automatic analysis."
    },
    {
      "command": "strings file",
      "description": "Print the sequences of printable characters in files. This command is often used in reverse engineering to find human-readable strings in binary files. It extracts and displays ASCII strings from the specified file."
    },
    {
      "command": "objdump -D binary > output.asm",
      "description": "Disassemble a binary file and output the assembly code. This command is useful for examining the inner workings of a compiled program. The '-D' option disassembles the binary."
    },
    {
      "command": "nm binary",
      "description": "List symbols from object files. This command helps identify functions, variables, and other symbols within a binary. It lists symbols from the specified object file."
    },
    {
      "command": "hexdump -C file",
      "description": "Display the contents of a file in hexadecimal, alongside its ASCII translation. This command provides a raw view of a binary's data, showing both hexadecimal and ASCII representations of the file contents."
    }
  ]
}
